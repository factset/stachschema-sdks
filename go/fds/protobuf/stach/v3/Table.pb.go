// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        v3.20.1
// source: fds/protobuf/stach/v3/Table.proto

package v3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
//A state of tabular data.
//If the tabular data has already been grouped, split, or a collapsed column produced, these properties are required to indicate that.
type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The array of column names that define the primary key for each row.
	//If more than one column is specified, it is referred to as a compound primary key. e.g. ['firstName', 'lastName'] the first name + last name makes a full name which uniquely identifies each row.
	//Required.
	PrimaryKeys []string `protobuf:"bytes,1,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
	//
	//The total number of rows in the table.
	//If the value is `0`, it is assumed that all rows are in the payload. If the value is greater than `0`, and the number of rows in the payload is less than the value, it is assumed that the table in the payload is a partial table.
	//Default is `0`.
	//Required if a payload contains partial data.
	TotalNumRows int32 `protobuf:"varint,2,opt,name=total_num_rows,json=totalNumRows,proto3" json:"total_num_rows,omitempty"`
	//
	//The result of the grouping algorithm.
	//Optional.
	GroupResult *Table_GroupResult `protobuf:"bytes,3,opt,name=group_result,json=groupResult,proto3" json:"group_result,omitempty"`
	//
	//The result of the splitting algorithm.
	//Optional.
	SplitResult *Table_SplitResult `protobuf:"bytes,4,opt,name=split_result,json=splitResult,proto3" json:"split_result,omitempty"`
	//
	//The custom metadata.
	//Optional.
	CustomMetadata map[string]*MetadataItem `protobuf:"bytes,100,rep,name=custom_metadata,json=customMetadata,proto3" json:"custom_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_v3_Table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_v3_Table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_v3_Table_proto_rawDescGZIP(), []int{0}
}

func (x *Table) GetPrimaryKeys() []string {
	if x != nil {
		return x.PrimaryKeys
	}
	return nil
}

func (x *Table) GetTotalNumRows() int32 {
	if x != nil {
		return x.TotalNumRows
	}
	return 0
}

func (x *Table) GetGroupResult() *Table_GroupResult {
	if x != nil {
		return x.GroupResult
	}
	return nil
}

func (x *Table) GetSplitResult() *Table_SplitResult {
	if x != nil {
		return x.SplitResult
	}
	return nil
}

func (x *Table) GetCustomMetadata() map[string]*MetadataItem {
	if x != nil {
		return x.CustomMetadata
	}
	return nil
}

//
//A result of executing the grouping algorithm.
type Table_GroupResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The names of the columns that were grouped by.
	//Required, unless `Table.groupResult.collapsedColumnResult.name` is specified.
	By []string `protobuf:"bytes,1,rep,name=by,proto3" json:"by,omitempty"`
	//
	//The realized collapsed column.
	//Optional.
	CollapsedColumnResult *Table_CollapsedColumnResult `protobuf:"bytes,2,opt,name=collapsed_column_result,json=collapsedColumnResult,proto3" json:"collapsed_column_result,omitempty"`
	//
	//The name of the `string` column that contains the row paths.
	//Required.
	RowPath string `protobuf:"bytes,3,opt,name=row_path,json=rowPath,proto3" json:"row_path,omitempty"`
	//
	//The name of the `boolean` column that indicates if a row is an aggregate row.
	//Required.
	AggregateRows string `protobuf:"bytes,4,opt,name=aggregate_rows,json=aggregateRows,proto3" json:"aggregate_rows,omitempty"`
	//
	//The name of the `int32` column that contains the group level override.
	//Takes precedence over row path length.
	//Optional.
	Level string `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *Table_GroupResult) Reset() {
	*x = Table_GroupResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_v3_Table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table_GroupResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table_GroupResult) ProtoMessage() {}

func (x *Table_GroupResult) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_v3_Table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table_GroupResult.ProtoReflect.Descriptor instead.
func (*Table_GroupResult) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_v3_Table_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Table_GroupResult) GetBy() []string {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *Table_GroupResult) GetCollapsedColumnResult() *Table_CollapsedColumnResult {
	if x != nil {
		return x.CollapsedColumnResult
	}
	return nil
}

func (x *Table_GroupResult) GetRowPath() string {
	if x != nil {
		return x.RowPath
	}
	return ""
}

func (x *Table_GroupResult) GetAggregateRows() string {
	if x != nil {
		return x.AggregateRows
	}
	return ""
}

func (x *Table_GroupResult) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

//
//A result of the collapsed column algorithm.
type Table_CollapsedColumnResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The name of the collapsed column.
	//The collapsed column is in the data so it is considered realized and therefore needs a name.
	//Required.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Table_CollapsedColumnResult) Reset() {
	*x = Table_CollapsedColumnResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_v3_Table_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table_CollapsedColumnResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table_CollapsedColumnResult) ProtoMessage() {}

func (x *Table_CollapsedColumnResult) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_v3_Table_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table_CollapsedColumnResult.ProtoReflect.Descriptor instead.
func (*Table_CollapsedColumnResult) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_v3_Table_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Table_CollapsedColumnResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//
//A result of executing the splitting algorithm.
type Table_SplitResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The name of the `string` column in the multi-level headers table that refers to column names in the primary table.
	//Required.
	MultiLevelHeadersTableReference string `protobuf:"bytes,1,opt,name=multi_level_headers_table_reference,json=multiLevelHeadersTableReference,proto3" json:"multi_level_headers_table_reference,omitempty"`
}

func (x *Table_SplitResult) Reset() {
	*x = Table_SplitResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_v3_Table_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table_SplitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table_SplitResult) ProtoMessage() {}

func (x *Table_SplitResult) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_v3_Table_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table_SplitResult.ProtoReflect.Descriptor instead.
func (*Table_SplitResult) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_v3_Table_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Table_SplitResult) GetMultiLevelHeadersTableReference() string {
	if x != nil {
		return x.MultiLevelHeadersTableReference
	}
	return ""
}

var File_fds_protobuf_stach_v3_Table_proto protoreflect.FileDescriptor

var file_fds_protobuf_stach_v3_Table_proto_rawDesc = []byte{
	0x0a, 0x21, 0x66, 0x64, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x61, 0x63, 0x68, 0x2f, 0x76, 0x33, 0x2f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x33, 0x1a, 0x28,
	0x66, 0x64, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x61,
	0x63, 0x68, 0x2f, 0x76, 0x33, 0x2f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x06, 0x0a, 0x05, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x0c,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x33, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5d, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e,
	0x76, 0x33, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xe5, 0x01, 0x0a,
	0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x62, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x62, 0x79, 0x12, 0x6e, 0x0a, 0x17,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x6f, 0x77, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x1a, 0x2b, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x5b, 0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x6a,
	0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e,
	0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x85, 0x01, 0x0a, 0x1d, 0x63,
	0x6f, 0x6d, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x76, 0x33, 0x42, 0x0a, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61,
	0x63, 0x68, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x73, 0x2f, 0x67, 0x6f,
	0x2f, 0x66, 0x64, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x61, 0x63, 0x68, 0x2f, 0x76, 0x33, 0xaa, 0x02, 0x19, 0x46, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x68, 0x2e,
	0x56, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fds_protobuf_stach_v3_Table_proto_rawDescOnce sync.Once
	file_fds_protobuf_stach_v3_Table_proto_rawDescData = file_fds_protobuf_stach_v3_Table_proto_rawDesc
)

func file_fds_protobuf_stach_v3_Table_proto_rawDescGZIP() []byte {
	file_fds_protobuf_stach_v3_Table_proto_rawDescOnce.Do(func() {
		file_fds_protobuf_stach_v3_Table_proto_rawDescData = protoimpl.X.CompressGZIP(file_fds_protobuf_stach_v3_Table_proto_rawDescData)
	})
	return file_fds_protobuf_stach_v3_Table_proto_rawDescData
}

var file_fds_protobuf_stach_v3_Table_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fds_protobuf_stach_v3_Table_proto_goTypes = []interface{}{
	(*Table)(nil),                       // 0: factset.protobuf.stach.v3.Table
	(*Table_GroupResult)(nil),           // 1: factset.protobuf.stach.v3.Table.GroupResult
	(*Table_CollapsedColumnResult)(nil), // 2: factset.protobuf.stach.v3.Table.CollapsedColumnResult
	(*Table_SplitResult)(nil),           // 3: factset.protobuf.stach.v3.Table.SplitResult
	nil,                                 // 4: factset.protobuf.stach.v3.Table.CustomMetadataEntry
	(*MetadataItem)(nil),                // 5: factset.protobuf.stach.v3.MetadataItem
}
var file_fds_protobuf_stach_v3_Table_proto_depIdxs = []int32{
	1, // 0: factset.protobuf.stach.v3.Table.group_result:type_name -> factset.protobuf.stach.v3.Table.GroupResult
	3, // 1: factset.protobuf.stach.v3.Table.split_result:type_name -> factset.protobuf.stach.v3.Table.SplitResult
	4, // 2: factset.protobuf.stach.v3.Table.custom_metadata:type_name -> factset.protobuf.stach.v3.Table.CustomMetadataEntry
	2, // 3: factset.protobuf.stach.v3.Table.GroupResult.collapsed_column_result:type_name -> factset.protobuf.stach.v3.Table.CollapsedColumnResult
	5, // 4: factset.protobuf.stach.v3.Table.CustomMetadataEntry.value:type_name -> factset.protobuf.stach.v3.MetadataItem
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_fds_protobuf_stach_v3_Table_proto_init() }
func file_fds_protobuf_stach_v3_Table_proto_init() {
	if File_fds_protobuf_stach_v3_Table_proto != nil {
		return
	}
	file_fds_protobuf_stach_v3_MetadataItem_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fds_protobuf_stach_v3_Table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fds_protobuf_stach_v3_Table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table_GroupResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fds_protobuf_stach_v3_Table_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table_CollapsedColumnResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fds_protobuf_stach_v3_Table_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table_SplitResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fds_protobuf_stach_v3_Table_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fds_protobuf_stach_v3_Table_proto_goTypes,
		DependencyIndexes: file_fds_protobuf_stach_v3_Table_proto_depIdxs,
		MessageInfos:      file_fds_protobuf_stach_v3_Table_proto_msgTypes,
	}.Build()
	File_fds_protobuf_stach_v3_Table_proto = out.File
	file_fds_protobuf_stach_v3_Table_proto_rawDesc = nil
	file_fds_protobuf_stach_v3_Table_proto_goTypes = nil
	file_fds_protobuf_stach_v3_Table_proto_depIdxs = nil
}
