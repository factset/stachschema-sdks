// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: fds/protobuf/stach/RowOrganized.proto

package stach

import (
	table "github.com/factset/stachschema/go/v2/fds/protobuf/stach/table"
	_struct "github.com/golang/protobuf/ptypes/struct"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A type of row
type RowOrganizedPackage_Row_RowType int32

const (
	RowOrganizedPackage_Row_Body   RowOrganizedPackage_Row_RowType = 0 // A body row
	RowOrganizedPackage_Row_Header RowOrganizedPackage_Row_RowType = 1 // A header row
)

// Enum value maps for RowOrganizedPackage_Row_RowType.
var (
	RowOrganizedPackage_Row_RowType_name = map[int32]string{
		0: "Body",
		1: "Header",
	}
	RowOrganizedPackage_Row_RowType_value = map[string]int32{
		"Body":   0,
		"Header": 1,
	}
)

func (x RowOrganizedPackage_Row_RowType) Enum() *RowOrganizedPackage_Row_RowType {
	p := new(RowOrganizedPackage_Row_RowType)
	*p = x
	return p
}

func (x RowOrganizedPackage_Row_RowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RowOrganizedPackage_Row_RowType) Descriptor() protoreflect.EnumDescriptor {
	return file_fds_protobuf_stach_RowOrganized_proto_enumTypes[0].Descriptor()
}

func (RowOrganizedPackage_Row_RowType) Type() protoreflect.EnumType {
	return &file_fds_protobuf_stach_RowOrganized_proto_enumTypes[0]
}

func (x RowOrganizedPackage_Row_RowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RowOrganizedPackage_Row_RowType.Descriptor instead.
func (RowOrganizedPackage_Row_RowType) EnumDescriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP(), []int{0, 4, 0}
}

// A table where a row is sourced from
type RowOrganizedPackage_HeaderCellDetail_TableSource int32

const (
	RowOrganizedPackage_HeaderCellDetail_UNKNOWN RowOrganizedPackage_HeaderCellDetail_TableSource = 0
	RowOrganizedPackage_HeaderCellDetail_NONE    RowOrganizedPackage_HeaderCellDetail_TableSource = 1
	RowOrganizedPackage_HeaderCellDetail_PRIMARY RowOrganizedPackage_HeaderCellDetail_TableSource = 2
	RowOrganizedPackage_HeaderCellDetail_HEADERS RowOrganizedPackage_HeaderCellDetail_TableSource = 3
)

// Enum value maps for RowOrganizedPackage_HeaderCellDetail_TableSource.
var (
	RowOrganizedPackage_HeaderCellDetail_TableSource_name = map[int32]string{
		0: "UNKNOWN",
		1: "NONE",
		2: "PRIMARY",
		3: "HEADERS",
	}
	RowOrganizedPackage_HeaderCellDetail_TableSource_value = map[string]int32{
		"UNKNOWN": 0,
		"NONE":    1,
		"PRIMARY": 2,
		"HEADERS": 3,
	}
)

func (x RowOrganizedPackage_HeaderCellDetail_TableSource) Enum() *RowOrganizedPackage_HeaderCellDetail_TableSource {
	p := new(RowOrganizedPackage_HeaderCellDetail_TableSource)
	*p = x
	return p
}

func (x RowOrganizedPackage_HeaderCellDetail_TableSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RowOrganizedPackage_HeaderCellDetail_TableSource) Descriptor() protoreflect.EnumDescriptor {
	return file_fds_protobuf_stach_RowOrganized_proto_enumTypes[1].Descriptor()
}

func (RowOrganizedPackage_HeaderCellDetail_TableSource) Type() protoreflect.EnumType {
	return &file_fds_protobuf_stach_RowOrganized_proto_enumTypes[1]
}

func (x RowOrganizedPackage_HeaderCellDetail_TableSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RowOrganizedPackage_HeaderCellDetail_TableSource.Descriptor instead.
func (RowOrganizedPackage_HeaderCellDetail_TableSource) EnumDescriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP(), []int{0, 6, 0}
}

// A row organized package of tables
type RowOrganizedPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the STACH schema. Formatted {major}.{minor}
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The map (key: table id) of all tables
	Tables map[string]*RowOrganizedPackage_Table `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RowOrganizedPackage) Reset() {
	*x = RowOrganizedPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowOrganizedPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowOrganizedPackage) ProtoMessage() {}

func (x *RowOrganizedPackage) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowOrganizedPackage.ProtoReflect.Descriptor instead.
func (*RowOrganizedPackage) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP(), []int{0}
}

func (x *RowOrganizedPackage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RowOrganizedPackage) GetTables() map[string]*RowOrganizedPackage_Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

// A row organized table
type RowOrganizedPackage_Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The definition
	Definition *RowOrganizedPackage_TableDefinition `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	// The headers definition
	HeadersDefinition *RowOrganizedPackage_TableDefinition `protobuf:"bytes,2,opt,name=headers_definition,json=headersDefinition,proto3" json:"headers_definition,omitempty"`
	// The data
	Data *RowOrganizedPackage_TableData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RowOrganizedPackage_Table) Reset() {
	*x = RowOrganizedPackage_Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowOrganizedPackage_Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowOrganizedPackage_Table) ProtoMessage() {}

func (x *RowOrganizedPackage_Table) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowOrganizedPackage_Table.ProtoReflect.Descriptor instead.
func (*RowOrganizedPackage_Table) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RowOrganizedPackage_Table) GetDefinition() *RowOrganizedPackage_TableDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *RowOrganizedPackage_Table) GetHeadersDefinition() *RowOrganizedPackage_TableDefinition {
	if x != nil {
		return x.HeadersDefinition
	}
	return nil
}

func (x *RowOrganizedPackage_Table) GetData() *RowOrganizedPackage_TableData {
	if x != nil {
		return x.Data
	}
	return nil
}

// A table definition
type RowOrganizedPackage_TableDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column definitions
	Columns []*table.ColumnDefinition `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *RowOrganizedPackage_TableDefinition) Reset() {
	*x = RowOrganizedPackage_TableDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowOrganizedPackage_TableDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowOrganizedPackage_TableDefinition) ProtoMessage() {}

func (x *RowOrganizedPackage_TableDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowOrganizedPackage_TableDefinition.ProtoReflect.Descriptor instead.
func (*RowOrganizedPackage_TableDefinition) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RowOrganizedPackage_TableDefinition) GetColumns() []*table.ColumnDefinition {
	if x != nil {
		return x.Columns
	}
	return nil
}

// A table data
type RowOrganizedPackage_TableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rows
	Rows []*RowOrganizedPackage_Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	// The map (key: metadataitem id) of metadata at the table location
	TableMetadata map[string]*table.MetadataItem `protobuf:"bytes,2,rep,name=table_metadata,json=tableMetadata,proto3" json:"table_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The map (key: column id) of metadata at the column location
	ColumnMetadata map[string]*RowOrganizedPackage_MapOfMetadata `protobuf:"bytes,3,rep,name=column_metadata,json=columnMetadata,proto3" json:"column_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RowOrganizedPackage_TableData) Reset() {
	*x = RowOrganizedPackage_TableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowOrganizedPackage_TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowOrganizedPackage_TableData) ProtoMessage() {}

func (x *RowOrganizedPackage_TableData) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowOrganizedPackage_TableData.ProtoReflect.Descriptor instead.
func (*RowOrganizedPackage_TableData) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RowOrganizedPackage_TableData) GetRows() []*RowOrganizedPackage_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *RowOrganizedPackage_TableData) GetTableMetadata() map[string]*table.MetadataItem {
	if x != nil {
		return x.TableMetadata
	}
	return nil
}

func (x *RowOrganizedPackage_TableData) GetColumnMetadata() map[string]*RowOrganizedPackage_MapOfMetadata {
	if x != nil {
		return x.ColumnMetadata
	}
	return nil
}

// A row
type RowOrganizedPackage_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The row id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The row type
	RowType RowOrganizedPackage_Row_RowType `protobuf:"varint,2,opt,name=row_type,json=rowType,proto3,enum=factset.protobuf.stach.RowOrganizedPackage_Row_RowType" json:"row_type,omitempty"`
	// Types that are assignable to Kind:
	//	*RowOrganizedPackage_Row_Cells
	//	*RowOrganizedPackage_Row_Values
	Kind isRowOrganizedPackage_Row_Kind `protobuf_oneof:"kind"`
	// The details for a body row cell
	CellDetails map[string]*RowOrganizedPackage_CellDetail `protobuf:"bytes,5,rep,name=cell_details,json=cellDetails,proto3" json:"cell_details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The details for a header row cell
	HeaderCellDetails map[string]*RowOrganizedPackage_HeaderCellDetail `protobuf:"bytes,6,rep,name=header_cell_details,json=headerCellDetails,proto3" json:"header_cell_details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The map (key: metadataitem id) of metadata at the row location
	RowMetadata map[string]*table.MetadataItem `protobuf:"bytes,7,rep,name=row_metadata,json=rowMetadata,proto3" json:"row_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RowOrganizedPackage_Row) Reset() {
	*x = RowOrganizedPackage_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowOrganizedPackage_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowOrganizedPackage_Row) ProtoMessage() {}

func (x *RowOrganizedPackage_Row) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowOrganizedPackage_Row.ProtoReflect.Descriptor instead.
func (*RowOrganizedPackage_Row) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RowOrganizedPackage_Row) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RowOrganizedPackage_Row) GetRowType() RowOrganizedPackage_Row_RowType {
	if x != nil {
		return x.RowType
	}
	return RowOrganizedPackage_Row_Body
}

func (m *RowOrganizedPackage_Row) GetKind() isRowOrganizedPackage_Row_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *RowOrganizedPackage_Row) GetCells() *_struct.ListValue {
	if x, ok := x.GetKind().(*RowOrganizedPackage_Row_Cells); ok {
		return x.Cells
	}
	return nil
}

func (x *RowOrganizedPackage_Row) GetValues() *_struct.Struct {
	if x, ok := x.GetKind().(*RowOrganizedPackage_Row_Values); ok {
		return x.Values
	}
	return nil
}

func (x *RowOrganizedPackage_Row) GetCellDetails() map[string]*RowOrganizedPackage_CellDetail {
	if x != nil {
		return x.CellDetails
	}
	return nil
}

func (x *RowOrganizedPackage_Row) GetHeaderCellDetails() map[string]*RowOrganizedPackage_HeaderCellDetail {
	if x != nil {
		return x.HeaderCellDetails
	}
	return nil
}

func (x *RowOrganizedPackage_Row) GetRowMetadata() map[string]*table.MetadataItem {
	if x != nil {
		return x.RowMetadata
	}
	return nil
}

type isRowOrganizedPackage_Row_Kind interface {
	isRowOrganizedPackage_Row_Kind()
}

type RowOrganizedPackage_Row_Cells struct {
	// The list of cell values
	Cells *_struct.ListValue `protobuf:"bytes,3,opt,name=cells,proto3,oneof"`
}

type RowOrganizedPackage_Row_Values struct {
	// The map of cell values
	Values *_struct.Struct `protobuf:"bytes,4,opt,name=values,proto3,oneof"`
}

func (*RowOrganizedPackage_Row_Cells) isRowOrganizedPackage_Row_Kind() {}

func (*RowOrganizedPackage_Row_Values) isRowOrganizedPackage_Row_Kind() {}

// A body row cell detail
type RowOrganizedPackage_CellDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The group level
	GroupLevel int32 `protobuf:"varint,1,opt,name=group_level,json=groupLevel,proto3" json:"group_level,omitempty"`
	// The definition of the cell; overrides the column definition
	CellDefinition *table.CellDefinition `protobuf:"bytes,2,opt,name=cell_definition,json=cellDefinition,proto3" json:"cell_definition,omitempty"`
	// The map (key: metadataitem id) of metadata at the cell location
	CellMetadata map[string]*table.MetadataItem `protobuf:"bytes,3,rep,name=cell_metadata,json=cellMetadata,proto3" json:"cell_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RowOrganizedPackage_CellDetail) Reset() {
	*x = RowOrganizedPackage_CellDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowOrganizedPackage_CellDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowOrganizedPackage_CellDetail) ProtoMessage() {}

func (x *RowOrganizedPackage_CellDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowOrganizedPackage_CellDetail.ProtoReflect.Descriptor instead.
func (*RowOrganizedPackage_CellDetail) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RowOrganizedPackage_CellDetail) GetGroupLevel() int32 {
	if x != nil {
		return x.GroupLevel
	}
	return 0
}

func (x *RowOrganizedPackage_CellDetail) GetCellDefinition() *table.CellDefinition {
	if x != nil {
		return x.CellDefinition
	}
	return nil
}

func (x *RowOrganizedPackage_CellDetail) GetCellMetadata() map[string]*table.MetadataItem {
	if x != nil {
		return x.CellMetadata
	}
	return nil
}

// A header row cell detail
type RowOrganizedPackage_HeaderCellDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column span
	Colspan int32 `protobuf:"varint,1,opt,name=colspan,proto3" json:"colspan,omitempty"`
	// The row span
	Rowspan int32 `protobuf:"varint,2,opt,name=rowspan,proto3" json:"rowspan,omitempty"`
	// The table where the row is sourced from
	Source RowOrganizedPackage_HeaderCellDetail_TableSource `protobuf:"varint,3,opt,name=source,proto3,enum=factset.protobuf.stach.RowOrganizedPackage_HeaderCellDetail_TableSource" json:"source,omitempty"`
	// The column index; used to index into the `headers_definition.columns` array
	ColumnIndex int32 `protobuf:"varint,4,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	// The definition of the cell; overrides the column definition
	CellDefinition *table.CellDefinition `protobuf:"bytes,5,opt,name=cell_definition,json=cellDefinition,proto3" json:"cell_definition,omitempty"`
	// The map (key: metadataitem id) of metadata at the cell location
	CellMetadata map[string]*table.MetadataItem `protobuf:"bytes,6,rep,name=cell_metadata,json=cellMetadata,proto3" json:"cell_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RowOrganizedPackage_HeaderCellDetail) Reset() {
	*x = RowOrganizedPackage_HeaderCellDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowOrganizedPackage_HeaderCellDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowOrganizedPackage_HeaderCellDetail) ProtoMessage() {}

func (x *RowOrganizedPackage_HeaderCellDetail) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowOrganizedPackage_HeaderCellDetail.ProtoReflect.Descriptor instead.
func (*RowOrganizedPackage_HeaderCellDetail) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP(), []int{0, 6}
}

func (x *RowOrganizedPackage_HeaderCellDetail) GetColspan() int32 {
	if x != nil {
		return x.Colspan
	}
	return 0
}

func (x *RowOrganizedPackage_HeaderCellDetail) GetRowspan() int32 {
	if x != nil {
		return x.Rowspan
	}
	return 0
}

func (x *RowOrganizedPackage_HeaderCellDetail) GetSource() RowOrganizedPackage_HeaderCellDetail_TableSource {
	if x != nil {
		return x.Source
	}
	return RowOrganizedPackage_HeaderCellDetail_UNKNOWN
}

func (x *RowOrganizedPackage_HeaderCellDetail) GetColumnIndex() int32 {
	if x != nil {
		return x.ColumnIndex
	}
	return 0
}

func (x *RowOrganizedPackage_HeaderCellDetail) GetCellDefinition() *table.CellDefinition {
	if x != nil {
		return x.CellDefinition
	}
	return nil
}

func (x *RowOrganizedPackage_HeaderCellDetail) GetCellMetadata() map[string]*table.MetadataItem {
	if x != nil {
		return x.CellMetadata
	}
	return nil
}

// A wrapper for a map of metadata items
type RowOrganizedPackage_MapOfMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map (key: metadataitem id) metadata
	Items map[string]*table.MetadataItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RowOrganizedPackage_MapOfMetadata) Reset() {
	*x = RowOrganizedPackage_MapOfMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowOrganizedPackage_MapOfMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowOrganizedPackage_MapOfMetadata) ProtoMessage() {}

func (x *RowOrganizedPackage_MapOfMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_fds_protobuf_stach_RowOrganized_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowOrganizedPackage_MapOfMetadata.ProtoReflect.Descriptor instead.
func (*RowOrganizedPackage_MapOfMetadata) Descriptor() ([]byte, []int) {
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP(), []int{0, 7}
}

func (x *RowOrganizedPackage_MapOfMetadata) GetItems() map[string]*table.MetadataItem {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_fds_protobuf_stach_RowOrganized_proto protoreflect.FileDescriptor

var file_fds_protobuf_stach_RowOrganized_proto_rawDesc = []byte{
	0x0a, 0x25, 0x66, 0x64, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x61, 0x63, 0x68, 0x2f, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x1a,
	0x2b, 0x66, 0x64, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x61, 0x63, 0x68, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x66, 0x64,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x68,
	0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x66, 0x64, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x19, 0x0a, 0x13, 0x52,
	0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x6c, 0x0a,
	0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9b, 0x02, 0x0a, 0x05,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5b, 0x0a, 0x0f, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0xa1, 0x04, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x6f, 0x0a, 0x0e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x72, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x6c,
	0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a, 0x13,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f,
	0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x66, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa4, 0x07, 0x0a, 0x03, 0x52,
	0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x52, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f,
	0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x6f, 0x77, 0x2e, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x63, 0x0a,
	0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x52, 0x6f, 0x77, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x76, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x6f, 0x77,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43,
	0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x63, 0x0a, 0x0c, 0x72, 0x6f,
	0x77, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x6f,
	0x77, 0x2e, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x72, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x76, 0x0a, 0x10, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f,
	0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x82, 0x01, 0x0a, 0x16, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x10,
	0x52, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x07, 0x52, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x1a, 0xe0, 0x02, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x55, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x68, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x6b, 0x0a, 0x11, 0x43, 0x65, 0x6c, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc4, 0x04, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43,
	0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x73, 0x70, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x73,
	0x70, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x60, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x55, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73,
	0x74, 0x61, 0x63, 0x68, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x0d, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x6b,
	0x0a, 0x11, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x0b, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x03, 0x1a, 0xd1, 0x01, 0x0a, 0x0d,
	0x4d, 0x61, 0x70, 0x4f, 0x66, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x66, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x64, 0x0a, 0x0a, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x68, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x81, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x73, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x68, 0x42, 0x11,
	0x52, 0x6f, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x68, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x64, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x68, 0xaa, 0x02, 0x16, 0x46, 0x61, 0x63,
	0x74, 0x53, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x61, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fds_protobuf_stach_RowOrganized_proto_rawDescOnce sync.Once
	file_fds_protobuf_stach_RowOrganized_proto_rawDescData = file_fds_protobuf_stach_RowOrganized_proto_rawDesc
)

func file_fds_protobuf_stach_RowOrganized_proto_rawDescGZIP() []byte {
	file_fds_protobuf_stach_RowOrganized_proto_rawDescOnce.Do(func() {
		file_fds_protobuf_stach_RowOrganized_proto_rawDescData = protoimpl.X.CompressGZIP(file_fds_protobuf_stach_RowOrganized_proto_rawDescData)
	})
	return file_fds_protobuf_stach_RowOrganized_proto_rawDescData
}

var file_fds_protobuf_stach_RowOrganized_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_fds_protobuf_stach_RowOrganized_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_fds_protobuf_stach_RowOrganized_proto_goTypes = []interface{}{
	(RowOrganizedPackage_Row_RowType)(0),                  // 0: factset.protobuf.stach.RowOrganizedPackage.Row.RowType
	(RowOrganizedPackage_HeaderCellDetail_TableSource)(0), // 1: factset.protobuf.stach.RowOrganizedPackage.HeaderCellDetail.TableSource
	(*RowOrganizedPackage)(nil),                           // 2: factset.protobuf.stach.RowOrganizedPackage
	nil,                                                   // 3: factset.protobuf.stach.RowOrganizedPackage.TablesEntry
	(*RowOrganizedPackage_Table)(nil),                     // 4: factset.protobuf.stach.RowOrganizedPackage.Table
	(*RowOrganizedPackage_TableDefinition)(nil),           // 5: factset.protobuf.stach.RowOrganizedPackage.TableDefinition
	(*RowOrganizedPackage_TableData)(nil),                 // 6: factset.protobuf.stach.RowOrganizedPackage.TableData
	(*RowOrganizedPackage_Row)(nil),                       // 7: factset.protobuf.stach.RowOrganizedPackage.Row
	(*RowOrganizedPackage_CellDetail)(nil),                // 8: factset.protobuf.stach.RowOrganizedPackage.CellDetail
	(*RowOrganizedPackage_HeaderCellDetail)(nil),          // 9: factset.protobuf.stach.RowOrganizedPackage.HeaderCellDetail
	(*RowOrganizedPackage_MapOfMetadata)(nil),             // 10: factset.protobuf.stach.RowOrganizedPackage.MapOfMetadata
	nil,                            // 11: factset.protobuf.stach.RowOrganizedPackage.TableData.TableMetadataEntry
	nil,                            // 12: factset.protobuf.stach.RowOrganizedPackage.TableData.ColumnMetadataEntry
	nil,                            // 13: factset.protobuf.stach.RowOrganizedPackage.Row.CellDetailsEntry
	nil,                            // 14: factset.protobuf.stach.RowOrganizedPackage.Row.HeaderCellDetailsEntry
	nil,                            // 15: factset.protobuf.stach.RowOrganizedPackage.Row.RowMetadataEntry
	nil,                            // 16: factset.protobuf.stach.RowOrganizedPackage.CellDetail.CellMetadataEntry
	nil,                            // 17: factset.protobuf.stach.RowOrganizedPackage.HeaderCellDetail.CellMetadataEntry
	nil,                            // 18: factset.protobuf.stach.RowOrganizedPackage.MapOfMetadata.ItemsEntry
	(*table.ColumnDefinition)(nil), // 19: factset.protobuf.stach.table.ColumnDefinition
	(*_struct.ListValue)(nil),      // 20: google.protobuf.ListValue
	(*_struct.Struct)(nil),         // 21: google.protobuf.Struct
	(*table.CellDefinition)(nil),   // 22: factset.protobuf.stach.table.CellDefinition
	(*table.MetadataItem)(nil),     // 23: factset.protobuf.stach.table.MetadataItem
}
var file_fds_protobuf_stach_RowOrganized_proto_depIdxs = []int32{
	3,  // 0: factset.protobuf.stach.RowOrganizedPackage.tables:type_name -> factset.protobuf.stach.RowOrganizedPackage.TablesEntry
	4,  // 1: factset.protobuf.stach.RowOrganizedPackage.TablesEntry.value:type_name -> factset.protobuf.stach.RowOrganizedPackage.Table
	5,  // 2: factset.protobuf.stach.RowOrganizedPackage.Table.definition:type_name -> factset.protobuf.stach.RowOrganizedPackage.TableDefinition
	5,  // 3: factset.protobuf.stach.RowOrganizedPackage.Table.headers_definition:type_name -> factset.protobuf.stach.RowOrganizedPackage.TableDefinition
	6,  // 4: factset.protobuf.stach.RowOrganizedPackage.Table.data:type_name -> factset.protobuf.stach.RowOrganizedPackage.TableData
	19, // 5: factset.protobuf.stach.RowOrganizedPackage.TableDefinition.columns:type_name -> factset.protobuf.stach.table.ColumnDefinition
	7,  // 6: factset.protobuf.stach.RowOrganizedPackage.TableData.rows:type_name -> factset.protobuf.stach.RowOrganizedPackage.Row
	11, // 7: factset.protobuf.stach.RowOrganizedPackage.TableData.table_metadata:type_name -> factset.protobuf.stach.RowOrganizedPackage.TableData.TableMetadataEntry
	12, // 8: factset.protobuf.stach.RowOrganizedPackage.TableData.column_metadata:type_name -> factset.protobuf.stach.RowOrganizedPackage.TableData.ColumnMetadataEntry
	0,  // 9: factset.protobuf.stach.RowOrganizedPackage.Row.row_type:type_name -> factset.protobuf.stach.RowOrganizedPackage.Row.RowType
	20, // 10: factset.protobuf.stach.RowOrganizedPackage.Row.cells:type_name -> google.protobuf.ListValue
	21, // 11: factset.protobuf.stach.RowOrganizedPackage.Row.values:type_name -> google.protobuf.Struct
	13, // 12: factset.protobuf.stach.RowOrganizedPackage.Row.cell_details:type_name -> factset.protobuf.stach.RowOrganizedPackage.Row.CellDetailsEntry
	14, // 13: factset.protobuf.stach.RowOrganizedPackage.Row.header_cell_details:type_name -> factset.protobuf.stach.RowOrganizedPackage.Row.HeaderCellDetailsEntry
	15, // 14: factset.protobuf.stach.RowOrganizedPackage.Row.row_metadata:type_name -> factset.protobuf.stach.RowOrganizedPackage.Row.RowMetadataEntry
	22, // 15: factset.protobuf.stach.RowOrganizedPackage.CellDetail.cell_definition:type_name -> factset.protobuf.stach.table.CellDefinition
	16, // 16: factset.protobuf.stach.RowOrganizedPackage.CellDetail.cell_metadata:type_name -> factset.protobuf.stach.RowOrganizedPackage.CellDetail.CellMetadataEntry
	1,  // 17: factset.protobuf.stach.RowOrganizedPackage.HeaderCellDetail.source:type_name -> factset.protobuf.stach.RowOrganizedPackage.HeaderCellDetail.TableSource
	22, // 18: factset.protobuf.stach.RowOrganizedPackage.HeaderCellDetail.cell_definition:type_name -> factset.protobuf.stach.table.CellDefinition
	17, // 19: factset.protobuf.stach.RowOrganizedPackage.HeaderCellDetail.cell_metadata:type_name -> factset.protobuf.stach.RowOrganizedPackage.HeaderCellDetail.CellMetadataEntry
	18, // 20: factset.protobuf.stach.RowOrganizedPackage.MapOfMetadata.items:type_name -> factset.protobuf.stach.RowOrganizedPackage.MapOfMetadata.ItemsEntry
	23, // 21: factset.protobuf.stach.RowOrganizedPackage.TableData.TableMetadataEntry.value:type_name -> factset.protobuf.stach.table.MetadataItem
	10, // 22: factset.protobuf.stach.RowOrganizedPackage.TableData.ColumnMetadataEntry.value:type_name -> factset.protobuf.stach.RowOrganizedPackage.MapOfMetadata
	8,  // 23: factset.protobuf.stach.RowOrganizedPackage.Row.CellDetailsEntry.value:type_name -> factset.protobuf.stach.RowOrganizedPackage.CellDetail
	9,  // 24: factset.protobuf.stach.RowOrganizedPackage.Row.HeaderCellDetailsEntry.value:type_name -> factset.protobuf.stach.RowOrganizedPackage.HeaderCellDetail
	23, // 25: factset.protobuf.stach.RowOrganizedPackage.Row.RowMetadataEntry.value:type_name -> factset.protobuf.stach.table.MetadataItem
	23, // 26: factset.protobuf.stach.RowOrganizedPackage.CellDetail.CellMetadataEntry.value:type_name -> factset.protobuf.stach.table.MetadataItem
	23, // 27: factset.protobuf.stach.RowOrganizedPackage.HeaderCellDetail.CellMetadataEntry.value:type_name -> factset.protobuf.stach.table.MetadataItem
	23, // 28: factset.protobuf.stach.RowOrganizedPackage.MapOfMetadata.ItemsEntry.value:type_name -> factset.protobuf.stach.table.MetadataItem
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_fds_protobuf_stach_RowOrganized_proto_init() }
func file_fds_protobuf_stach_RowOrganized_proto_init() {
	if File_fds_protobuf_stach_RowOrganized_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fds_protobuf_stach_RowOrganized_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowOrganizedPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fds_protobuf_stach_RowOrganized_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowOrganizedPackage_Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fds_protobuf_stach_RowOrganized_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowOrganizedPackage_TableDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fds_protobuf_stach_RowOrganized_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowOrganizedPackage_TableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fds_protobuf_stach_RowOrganized_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowOrganizedPackage_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fds_protobuf_stach_RowOrganized_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowOrganizedPackage_CellDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fds_protobuf_stach_RowOrganized_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowOrganizedPackage_HeaderCellDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fds_protobuf_stach_RowOrganized_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowOrganizedPackage_MapOfMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fds_protobuf_stach_RowOrganized_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*RowOrganizedPackage_Row_Cells)(nil),
		(*RowOrganizedPackage_Row_Values)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fds_protobuf_stach_RowOrganized_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fds_protobuf_stach_RowOrganized_proto_goTypes,
		DependencyIndexes: file_fds_protobuf_stach_RowOrganized_proto_depIdxs,
		EnumInfos:         file_fds_protobuf_stach_RowOrganized_proto_enumTypes,
		MessageInfos:      file_fds_protobuf_stach_RowOrganized_proto_msgTypes,
	}.Build()
	File_fds_protobuf_stach_RowOrganized_proto = out.File
	file_fds_protobuf_stach_RowOrganized_proto_rawDesc = nil
	file_fds_protobuf_stach_RowOrganized_proto_goTypes = nil
	file_fds_protobuf_stach_RowOrganized_proto_depIdxs = nil
}
