# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: fds/protobuf/stach/v2/table/Reference.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from fds.protobuf.stach.v2.table import ReferenceType_pb2 as fds_dot_protobuf_dot_stach_dot_v2_dot_table_dot_ReferenceType__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n+fds/protobuf/stach/v2/table/Reference.proto\x12\x1f\x66\x61\x63tset.protobuf.stach.v2.table\x1a/fds/protobuf/stach/v2/table/ReferenceType.proto\"\x88\x01\n\tReference\x12\x46\n\x0ereference_type\x18\x01 \x01(\x0e\x32..factset.protobuf.stach.v2.table.ReferenceType\x12\x10\n\x08table_id\x18\x02 \x01(\t\x12\x11\n\tcolumn_id\x18\x03 \x01(\t\x12\x0e\n\x06row_id\x18\x04 \x01(\tB\x9b\x01\n#com.factset.protobuf.stach.v2.tableB\x0eReferenceProtoZBgithub.com/factset/stachschema-sdks/go/fds/protobuf/stach/v2/table\xaa\x02\x1f\x46\x61\x63tSet.Protobuf.Stach.V2.Tableb\x06proto3')



_REFERENCE = DESCRIPTOR.message_types_by_name['Reference']
Reference = _reflection.GeneratedProtocolMessageType('Reference', (_message.Message,), {
  'DESCRIPTOR' : _REFERENCE,
  '__module__' : 'fds.protobuf.stach.v2.table.Reference_pb2'
  # @@protoc_insertion_point(class_scope:factset.protobuf.stach.v2.table.Reference)
  })
_sym_db.RegisterMessage(Reference)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n#com.factset.protobuf.stach.v2.tableB\016ReferenceProtoZBgithub.com/factset/stachschema-sdks/go/fds/protobuf/stach/v2/table\252\002\037FactSet.Protobuf.Stach.V2.Table'
  _REFERENCE._serialized_start=130
  _REFERENCE._serialized_end=266
# @@protoc_insertion_point(module_scope)
