// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fds/protobuf/stach/v3/Table.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FactSet.Protobuf.Stach.V3 {

  /// <summary>Holder for reflection information generated from fds/protobuf/stach/v3/Table.proto</summary>
  public static partial class TableReflection {

    #region Descriptor
    /// <summary>File descriptor for fds/protobuf/stach/v3/Table.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFmZHMvcHJvdG9idWYvc3RhY2gvdjMvVGFibGUucHJvdG8SGWZhY3RzZXQu",
            "cHJvdG9idWYuc3RhY2gudjMaKGZkcy9wcm90b2J1Zi9zdGFjaC92My9NZXRh",
            "ZGF0YUl0ZW0ucHJvdG8i/QQKBVRhYmxlEhQKDHByaW1hcnlfa2V5cxgBIAMo",
            "CRIWCg50b3RhbF9udW1fcm93cxgCIAEoBRJCCgxncm91cF9yZXN1bHQYAyAB",
            "KAsyLC5mYWN0c2V0LnByb3RvYnVmLnN0YWNoLnYzLlRhYmxlLkdyb3VwUmVz",
            "dWx0EkIKDHNwbGl0X3Jlc3VsdBgEIAEoCzIsLmZhY3RzZXQucHJvdG9idWYu",
            "c3RhY2gudjMuVGFibGUuU3BsaXRSZXN1bHQSTQoPY3VzdG9tX21ldGFkYXRh",
            "GGQgAygLMjQuZmFjdHNldC5wcm90b2J1Zi5zdGFjaC52My5UYWJsZS5DdXN0",
            "b21NZXRhZGF0YUVudHJ5GqsBCgtHcm91cFJlc3VsdBIKCgJieRgBIAMoCRJX",
            "Chdjb2xsYXBzZWRfY29sdW1uX3Jlc3VsdBgCIAEoCzI2LmZhY3RzZXQucHJv",
            "dG9idWYuc3RhY2gudjMuVGFibGUuQ29sbGFwc2VkQ29sdW1uUmVzdWx0EhAK",
            "CHJvd19wYXRoGAMgASgJEhYKDmFnZ3JlZ2F0ZV9yb3dzGAQgASgJEg0KBWxl",
            "dmVsGAUgASgJGiUKFUNvbGxhcHNlZENvbHVtblJlc3VsdBIMCgRuYW1lGAEg",
            "ASgJGjoKC1NwbGl0UmVzdWx0EisKI211bHRpX2xldmVsX2hlYWRlcnNfdGFi",
            "bGVfcmVmZXJlbmNlGAEgASgJGl4KE0N1c3RvbU1ldGFkYXRhRW50cnkSCwoD",
            "a2V5GAEgASgJEjYKBXZhbHVlGAIgASgLMicuZmFjdHNldC5wcm90b2J1Zi5z",
            "dGFjaC52My5NZXRhZGF0YUl0ZW06AjgBQoUBCh1jb20uZmFjdHNldC5wcm90",
            "b2J1Zi5zdGFjaC52M0IKVGFibGVQcm90b1o8Z2l0aHViLmNvbS9mYWN0c2V0",
            "L3N0YWNoc2NoZW1hLXNka3MvZ28vZmRzL3Byb3RvYnVmL3N0YWNoL3YzqgIZ",
            "RmFjdFNldC5Qcm90b2J1Zi5TdGFjaC5WM2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::FactSet.Protobuf.Stach.V3.MetadataItemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V3.Table), global::FactSet.Protobuf.Stach.V3.Table.Parser, new[]{ "PrimaryKeys", "TotalNumRows", "GroupResult", "SplitResult", "CustomMetadata" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V3.Table.Types.GroupResult), global::FactSet.Protobuf.Stach.V3.Table.Types.GroupResult.Parser, new[]{ "By", "CollapsedColumnResult", "RowPath", "AggregateRows", "Level" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V3.Table.Types.CollapsedColumnResult), global::FactSet.Protobuf.Stach.V3.Table.Types.CollapsedColumnResult.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V3.Table.Types.SplitResult), global::FactSet.Protobuf.Stach.V3.Table.Types.SplitResult.Parser, new[]{ "MultiLevelHeadersTableReference" }, null, null, null, null),
            null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///A state of tabular data.
  ///If the tabular data has already been grouped, split, or a collapsed column produced, these properties are required to indicate that.
  /// </summary>
  public sealed partial class Table : pb::IMessage<Table> {
    private static readonly pb::MessageParser<Table> _parser = new pb::MessageParser<Table>(() => new Table());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FactSet.Protobuf.Stach.V3.TableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table(Table other) : this() {
      primaryKeys_ = other.primaryKeys_.Clone();
      totalNumRows_ = other.totalNumRows_;
      groupResult_ = other.groupResult_ != null ? other.groupResult_.Clone() : null;
      splitResult_ = other.splitResult_ != null ? other.splitResult_.Clone() : null;
      customMetadata_ = other.customMetadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table Clone() {
      return new Table(this);
    }

    /// <summary>Field number for the "primary_keys" field.</summary>
    public const int PrimaryKeysFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_primaryKeys_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> primaryKeys_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 
    ///The array of column names that define the primary key for each row.
    ///If more than one column is specified, it is referred to as a compound primary key. e.g. ['firstName', 'lastName'] the first name + last name makes a full name which uniquely identifies each row.
    ///Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PrimaryKeys {
      get { return primaryKeys_; }
    }

    /// <summary>Field number for the "total_num_rows" field.</summary>
    public const int TotalNumRowsFieldNumber = 2;
    private int totalNumRows_;
    /// <summary>
    ///
    ///The total number of rows in the table.
    ///If the value is `0`, it is assumed that all rows are in the payload. If the value is greater than `0`, and the number of rows in the payload is less than the value, it is assumed that the table in the payload is a partial table.
    ///Default is `0`.
    ///Required if a payload contains partial data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNumRows {
      get { return totalNumRows_; }
      set {
        totalNumRows_ = value;
      }
    }

    /// <summary>Field number for the "group_result" field.</summary>
    public const int GroupResultFieldNumber = 3;
    private global::FactSet.Protobuf.Stach.V3.Table.Types.GroupResult groupResult_;
    /// <summary>
    ///
    ///The result of the grouping algorithm.
    ///Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FactSet.Protobuf.Stach.V3.Table.Types.GroupResult GroupResult {
      get { return groupResult_; }
      set {
        groupResult_ = value;
      }
    }

    /// <summary>Field number for the "split_result" field.</summary>
    public const int SplitResultFieldNumber = 4;
    private global::FactSet.Protobuf.Stach.V3.Table.Types.SplitResult splitResult_;
    /// <summary>
    ///
    ///The result of the splitting algorithm.
    ///Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FactSet.Protobuf.Stach.V3.Table.Types.SplitResult SplitResult {
      get { return splitResult_; }
      set {
        splitResult_ = value;
      }
    }

    /// <summary>Field number for the "custom_metadata" field.</summary>
    public const int CustomMetadataFieldNumber = 100;
    private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V3.MetadataItem>.Codec _map_customMetadata_codec
        = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V3.MetadataItem>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.V3.MetadataItem.Parser), 802);
    private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V3.MetadataItem> customMetadata_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V3.MetadataItem>();
    /// <summary>
    ///
    ///The custom metadata.
    ///Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::FactSet.Protobuf.Stach.V3.MetadataItem> CustomMetadata {
      get { return customMetadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!primaryKeys_.Equals(other.primaryKeys_)) return false;
      if (TotalNumRows != other.TotalNumRows) return false;
      if (!object.Equals(GroupResult, other.GroupResult)) return false;
      if (!object.Equals(SplitResult, other.SplitResult)) return false;
      if (!CustomMetadata.Equals(other.CustomMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= primaryKeys_.GetHashCode();
      if (TotalNumRows != 0) hash ^= TotalNumRows.GetHashCode();
      if (groupResult_ != null) hash ^= GroupResult.GetHashCode();
      if (splitResult_ != null) hash ^= SplitResult.GetHashCode();
      hash ^= CustomMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      primaryKeys_.WriteTo(output, _repeated_primaryKeys_codec);
      if (TotalNumRows != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalNumRows);
      }
      if (groupResult_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GroupResult);
      }
      if (splitResult_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SplitResult);
      }
      customMetadata_.WriteTo(output, _map_customMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += primaryKeys_.CalculateSize(_repeated_primaryKeys_codec);
      if (TotalNumRows != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNumRows);
      }
      if (groupResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupResult);
      }
      if (splitResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SplitResult);
      }
      size += customMetadata_.CalculateSize(_map_customMetadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Table other) {
      if (other == null) {
        return;
      }
      primaryKeys_.Add(other.primaryKeys_);
      if (other.TotalNumRows != 0) {
        TotalNumRows = other.TotalNumRows;
      }
      if (other.groupResult_ != null) {
        if (groupResult_ == null) {
          GroupResult = new global::FactSet.Protobuf.Stach.V3.Table.Types.GroupResult();
        }
        GroupResult.MergeFrom(other.GroupResult);
      }
      if (other.splitResult_ != null) {
        if (splitResult_ == null) {
          SplitResult = new global::FactSet.Protobuf.Stach.V3.Table.Types.SplitResult();
        }
        SplitResult.MergeFrom(other.SplitResult);
      }
      customMetadata_.Add(other.customMetadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            primaryKeys_.AddEntriesFrom(input, _repeated_primaryKeys_codec);
            break;
          }
          case 16: {
            TotalNumRows = input.ReadInt32();
            break;
          }
          case 26: {
            if (groupResult_ == null) {
              GroupResult = new global::FactSet.Protobuf.Stach.V3.Table.Types.GroupResult();
            }
            input.ReadMessage(GroupResult);
            break;
          }
          case 34: {
            if (splitResult_ == null) {
              SplitResult = new global::FactSet.Protobuf.Stach.V3.Table.Types.SplitResult();
            }
            input.ReadMessage(SplitResult);
            break;
          }
          case 802: {
            customMetadata_.AddEntriesFrom(input, _map_customMetadata_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Table message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///
      ///A result of executing the grouping algorithm.
      /// </summary>
      public sealed partial class GroupResult : pb::IMessage<GroupResult> {
        private static readonly pb::MessageParser<GroupResult> _parser = new pb::MessageParser<GroupResult>(() => new GroupResult());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.V3.Table.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupResult(GroupResult other) : this() {
          by_ = other.by_.Clone();
          collapsedColumnResult_ = other.collapsedColumnResult_ != null ? other.collapsedColumnResult_.Clone() : null;
          rowPath_ = other.rowPath_;
          aggregateRows_ = other.aggregateRows_;
          level_ = other.level_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupResult Clone() {
          return new GroupResult(this);
        }

        /// <summary>Field number for the "by" field.</summary>
        public const int ByFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_by_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> by_ = new pbc::RepeatedField<string>();
        /// <summary>
        ///
        ///The names of the columns that were grouped by.
        ///Required, unless `Table.groupResult.collapsedColumnResult.name` is specified.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> By {
          get { return by_; }
        }

        /// <summary>Field number for the "collapsed_column_result" field.</summary>
        public const int CollapsedColumnResultFieldNumber = 2;
        private global::FactSet.Protobuf.Stach.V3.Table.Types.CollapsedColumnResult collapsedColumnResult_;
        /// <summary>
        ///
        ///The realized collapsed column.
        ///Optional.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::FactSet.Protobuf.Stach.V3.Table.Types.CollapsedColumnResult CollapsedColumnResult {
          get { return collapsedColumnResult_; }
          set {
            collapsedColumnResult_ = value;
          }
        }

        /// <summary>Field number for the "row_path" field.</summary>
        public const int RowPathFieldNumber = 3;
        private string rowPath_ = "";
        /// <summary>
        ///
        ///The name of the `string` column that contains the row paths.
        ///Required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RowPath {
          get { return rowPath_; }
          set {
            rowPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "aggregate_rows" field.</summary>
        public const int AggregateRowsFieldNumber = 4;
        private string aggregateRows_ = "";
        /// <summary>
        ///
        ///The name of the `boolean` column that indicates if a row is an aggregate row.
        ///Required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AggregateRows {
          get { return aggregateRows_; }
          set {
            aggregateRows_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 5;
        private string level_ = "";
        /// <summary>
        ///
        ///The name of the `int32` column that contains the group level override.
        ///Takes precedence over row path length.
        ///Optional.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Level {
          get { return level_; }
          set {
            level_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GroupResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!by_.Equals(other.by_)) return false;
          if (!object.Equals(CollapsedColumnResult, other.CollapsedColumnResult)) return false;
          if (RowPath != other.RowPath) return false;
          if (AggregateRows != other.AggregateRows) return false;
          if (Level != other.Level) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= by_.GetHashCode();
          if (collapsedColumnResult_ != null) hash ^= CollapsedColumnResult.GetHashCode();
          if (RowPath.Length != 0) hash ^= RowPath.GetHashCode();
          if (AggregateRows.Length != 0) hash ^= AggregateRows.GetHashCode();
          if (Level.Length != 0) hash ^= Level.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          by_.WriteTo(output, _repeated_by_codec);
          if (collapsedColumnResult_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(CollapsedColumnResult);
          }
          if (RowPath.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(RowPath);
          }
          if (AggregateRows.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(AggregateRows);
          }
          if (Level.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Level);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += by_.CalculateSize(_repeated_by_codec);
          if (collapsedColumnResult_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollapsedColumnResult);
          }
          if (RowPath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RowPath);
          }
          if (AggregateRows.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AggregateRows);
          }
          if (Level.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Level);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupResult other) {
          if (other == null) {
            return;
          }
          by_.Add(other.by_);
          if (other.collapsedColumnResult_ != null) {
            if (collapsedColumnResult_ == null) {
              CollapsedColumnResult = new global::FactSet.Protobuf.Stach.V3.Table.Types.CollapsedColumnResult();
            }
            CollapsedColumnResult.MergeFrom(other.CollapsedColumnResult);
          }
          if (other.RowPath.Length != 0) {
            RowPath = other.RowPath;
          }
          if (other.AggregateRows.Length != 0) {
            AggregateRows = other.AggregateRows;
          }
          if (other.Level.Length != 0) {
            Level = other.Level;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                by_.AddEntriesFrom(input, _repeated_by_codec);
                break;
              }
              case 18: {
                if (collapsedColumnResult_ == null) {
                  CollapsedColumnResult = new global::FactSet.Protobuf.Stach.V3.Table.Types.CollapsedColumnResult();
                }
                input.ReadMessage(CollapsedColumnResult);
                break;
              }
              case 26: {
                RowPath = input.ReadString();
                break;
              }
              case 34: {
                AggregateRows = input.ReadString();
                break;
              }
              case 42: {
                Level = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///
      ///A result of the collapsed column algorithm.
      /// </summary>
      public sealed partial class CollapsedColumnResult : pb::IMessage<CollapsedColumnResult> {
        private static readonly pb::MessageParser<CollapsedColumnResult> _parser = new pb::MessageParser<CollapsedColumnResult>(() => new CollapsedColumnResult());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollapsedColumnResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.V3.Table.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollapsedColumnResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollapsedColumnResult(CollapsedColumnResult other) : this() {
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollapsedColumnResult Clone() {
          return new CollapsedColumnResult(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        ///
        ///The name of the collapsed column.
        ///The collapsed column is in the data so it is considered realized and therefore needs a name.
        ///Required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollapsedColumnResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollapsedColumnResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollapsedColumnResult other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///
      ///A result of executing the splitting algorithm.
      /// </summary>
      public sealed partial class SplitResult : pb::IMessage<SplitResult> {
        private static readonly pb::MessageParser<SplitResult> _parser = new pb::MessageParser<SplitResult>(() => new SplitResult());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SplitResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.V3.Table.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SplitResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SplitResult(SplitResult other) : this() {
          multiLevelHeadersTableReference_ = other.multiLevelHeadersTableReference_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SplitResult Clone() {
          return new SplitResult(this);
        }

        /// <summary>Field number for the "multi_level_headers_table_reference" field.</summary>
        public const int MultiLevelHeadersTableReferenceFieldNumber = 1;
        private string multiLevelHeadersTableReference_ = "";
        /// <summary>
        ///
        ///The name of the `string` column in the multi-level headers table that refers to column names in the primary table.
        ///Required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MultiLevelHeadersTableReference {
          get { return multiLevelHeadersTableReference_; }
          set {
            multiLevelHeadersTableReference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SplitResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SplitResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MultiLevelHeadersTableReference != other.MultiLevelHeadersTableReference) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MultiLevelHeadersTableReference.Length != 0) hash ^= MultiLevelHeadersTableReference.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MultiLevelHeadersTableReference.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(MultiLevelHeadersTableReference);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MultiLevelHeadersTableReference.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MultiLevelHeadersTableReference);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SplitResult other) {
          if (other == null) {
            return;
          }
          if (other.MultiLevelHeadersTableReference.Length != 0) {
            MultiLevelHeadersTableReference = other.MultiLevelHeadersTableReference;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                MultiLevelHeadersTableReference = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
