// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fds/protobuf/stach/v3/TableView.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FactSet.Protobuf.Stach.V3 {

  /// <summary>Holder for reflection information generated from fds/protobuf/stach/v3/TableView.proto</summary>
  public static partial class TableViewReflection {

    #region Descriptor
    /// <summary>File descriptor for fds/protobuf/stach/v3/TableView.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TableViewReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVmZHMvcHJvdG9idWYvc3RhY2gvdjMvVGFibGVWaWV3LnByb3RvEhlmYWN0",
            "c2V0LnByb3RvYnVmLnN0YWNoLnYzGihmZHMvcHJvdG9idWYvc3RhY2gvdjMv",
            "TWV0YWRhdGFJdGVtLnByb3RvIrgGCglUYWJsZVZpZXcSFAoMZGlzcGxheV9u",
            "YW1lGAEgASgJEg8KB2NvbHVtbnMYAiADKAkSQgoHaGVhZGVycxgDIAMoCzIx",
            "LmZhY3RzZXQucHJvdG9idWYuc3RhY2gudjMuVGFibGVWaWV3LkhlYWRlcnNF",
            "bnRyeRI5CgVncm91cBgEIAEoCzIqLmZhY3RzZXQucHJvdG9idWYuc3RhY2gu",
            "djMuVGFibGVWaWV3Lkdyb3VwEjkKBXNwbGl0GAUgASgLMiouZmFjdHNldC5w",
            "cm90b2J1Zi5zdGFjaC52My5UYWJsZVZpZXcuU3BsaXQSUQoPY3VzdG9tX21l",
            "dGFkYXRhGGQgAygLMjguZmFjdHNldC5wcm90b2J1Zi5zdGFjaC52My5UYWJs",
            "ZVZpZXcuQ3VzdG9tTWV0YWRhdGFFbnRyeRpjCgVHcm91cBIKCgJieRgBIAMo",
            "CRJOChBjb2xsYXBzZWRfY29sdW1uGAIgASgLMjQuZmFjdHNldC5wcm90b2J1",
            "Zi5zdGFjaC52My5UYWJsZVZpZXcuQ29sbGFwc2VkQ29sdW1uGiAKD0NvbGxh",
            "cHNlZENvbHVtbhINCgVhbGlhcxgBIAEoCRrfAQoFU3BsaXQSDQoFYWxpYXMY",
            "ASABKAkSCgoCYnkYAiADKAkSDwoHaW5jbHVkZRgDIAMoCRIMCgRvdmVyGAQg",
            "AygJEkgKB2hlYWRlcnMYBSADKAsyNy5mYWN0c2V0LnByb3RvYnVmLnN0YWNo",
            "LnYzLlRhYmxlVmlldy5TcGxpdC5IZWFkZXJzRW50cnkSIgoacmVtb3ZlX2Vt",
            "cHR5X3NwbGl0X2NvbHVtbnMYBiABKAgaLgoMSGVhZGVyc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaLgoMSGVhZGVyc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaXgoTQ3VzdG9tTWV0YWRh",
            "dGFFbnRyeRILCgNrZXkYASABKAkSNgoFdmFsdWUYAiABKAsyJy5mYWN0c2V0",
            "LnByb3RvYnVmLnN0YWNoLnYzLk1ldGFkYXRhSXRlbToCOAFCiQEKHWNvbS5m",
            "YWN0c2V0LnByb3RvYnVmLnN0YWNoLnYzQg5UYWJsZVZpZXdQcm90b1o8Z2l0",
            "aHViLmNvbS9mYWN0c2V0L3N0YWNoc2NoZW1hLXNka3MvZ28vZmRzL3Byb3Rv",
            "YnVmL3N0YWNoL3YzqgIZRmFjdFNldC5Qcm90b2J1Zi5TdGFjaC5WM2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::FactSet.Protobuf.Stach.V3.MetadataItemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V3.TableView), global::FactSet.Protobuf.Stach.V3.TableView.Parser, new[]{ "DisplayName", "Columns", "Headers", "Group", "Split", "CustomMetadata" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V3.TableView.Types.Group), global::FactSet.Protobuf.Stach.V3.TableView.Types.Group.Parser, new[]{ "By", "CollapsedColumn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V3.TableView.Types.CollapsedColumn), global::FactSet.Protobuf.Stach.V3.TableView.Types.CollapsedColumn.Parser, new[]{ "Alias" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V3.TableView.Types.Split), global::FactSet.Protobuf.Stach.V3.TableView.Types.Split.Parser, new[]{ "Alias", "By", "Include", "Over", "Headers", "RemoveEmptySplitColumns" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///A set of metadata specifying the settings that instruct how to turn tabular data into a rendered table.
  /// </summary>
  public sealed partial class TableView : pb::IMessage<TableView> {
    private static readonly pb::MessageParser<TableView> _parser = new pb::MessageParser<TableView>(() => new TableView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FactSet.Protobuf.Stach.V3.TableViewReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableView(TableView other) : this() {
      displayName_ = other.displayName_;
      columns_ = other.columns_.Clone();
      headers_ = other.headers_.Clone();
      group_ = other.group_ != null ? other.group_.Clone() : null;
      split_ = other.split_ != null ? other.split_.Clone() : null;
      customMetadata_ = other.customMetadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableView Clone() {
      return new TableView(this);
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 1;
    private string displayName_ = "";
    /// <summary>
    ///
    ///The human readable display name for the table.
    ///Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///
    ///The names of columns to display, which can include the alias for the collapsed column and the alias for the split columns.
    ///An empty array will display no columns. The order of the column names is the order the columns will be displayed.
    ///Required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_headers_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> headers_ = new pbc::MapField<string, string>();
    /// <summary>
    ///
    ///The human-readable header values of columns to be applied.
    ///Key is the column name, and value is the human-readable header value. e.g. `{ 'mcap': 'Market Capitalization' }`
    ///Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Headers {
      get { return headers_; }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 4;
    private global::FactSet.Protobuf.Stach.V3.TableView.Types.Group group_;
    /// <summary>
    ///
    ///The group algorithm to be applied.
    ///Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FactSet.Protobuf.Stach.V3.TableView.Types.Group Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "split" field.</summary>
    public const int SplitFieldNumber = 5;
    private global::FactSet.Protobuf.Stach.V3.TableView.Types.Split split_;
    /// <summary>
    ///
    ///The split algorithm to be applied.
    ///Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FactSet.Protobuf.Stach.V3.TableView.Types.Split Split {
      get { return split_; }
      set {
        split_ = value;
      }
    }

    /// <summary>Field number for the "custom_metadata" field.</summary>
    public const int CustomMetadataFieldNumber = 100;
    private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V3.MetadataItem>.Codec _map_customMetadata_codec
        = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V3.MetadataItem>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.V3.MetadataItem.Parser), 802);
    private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V3.MetadataItem> customMetadata_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V3.MetadataItem>();
    /// <summary>
    ///
    ///The custom metadata.
    ///Optional.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::FactSet.Protobuf.Stach.V3.MetadataItem> CustomMetadata {
      get { return customMetadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DisplayName != other.DisplayName) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (!Headers.Equals(other.Headers)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (!object.Equals(Split, other.Split)) return false;
      if (!CustomMetadata.Equals(other.CustomMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      hash ^= columns_.GetHashCode();
      hash ^= Headers.GetHashCode();
      if (group_ != null) hash ^= Group.GetHashCode();
      if (split_ != null) hash ^= Split.GetHashCode();
      hash ^= CustomMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DisplayName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DisplayName);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      headers_.WriteTo(output, _map_headers_codec);
      if (group_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Group);
      }
      if (split_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Split);
      }
      customMetadata_.WriteTo(output, _map_customMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      size += headers_.CalculateSize(_map_headers_codec);
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (split_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Split);
      }
      size += customMetadata_.CalculateSize(_map_customMetadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableView other) {
      if (other == null) {
        return;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      columns_.Add(other.columns_);
      headers_.Add(other.headers_);
      if (other.group_ != null) {
        if (group_ == null) {
          Group = new global::FactSet.Protobuf.Stach.V3.TableView.Types.Group();
        }
        Group.MergeFrom(other.Group);
      }
      if (other.split_ != null) {
        if (split_ == null) {
          Split = new global::FactSet.Protobuf.Stach.V3.TableView.Types.Split();
        }
        Split.MergeFrom(other.Split);
      }
      customMetadata_.Add(other.customMetadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DisplayName = input.ReadString();
            break;
          }
          case 18: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 26: {
            headers_.AddEntriesFrom(input, _map_headers_codec);
            break;
          }
          case 34: {
            if (group_ == null) {
              Group = new global::FactSet.Protobuf.Stach.V3.TableView.Types.Group();
            }
            input.ReadMessage(Group);
            break;
          }
          case 42: {
            if (split_ == null) {
              Split = new global::FactSet.Protobuf.Stach.V3.TableView.Types.Split();
            }
            input.ReadMessage(Split);
            break;
          }
          case 802: {
            customMetadata_.AddEntriesFrom(input, _map_customMetadata_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TableView message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///
      ///An algorithm that groups tabular data by a set of columns and produces aggregate rows.
      /// </summary>
      public sealed partial class Group : pb::IMessage<Group> {
        private static readonly pb::MessageParser<Group> _parser = new pb::MessageParser<Group>(() => new Group());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Group> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.V3.TableView.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group(Group other) : this() {
          by_ = other.by_.Clone();
          collapsedColumn_ = other.collapsedColumn_ != null ? other.collapsedColumn_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group Clone() {
          return new Group(this);
        }

        /// <summary>Field number for the "by" field.</summary>
        public const int ByFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_by_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> by_ = new pbc::RepeatedField<string>();
        /// <summary>
        ///
        ///The names of the columns to group by.
        ///Required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> By {
          get { return by_; }
        }

        /// <summary>Field number for the "collapsed_column" field.</summary>
        public const int CollapsedColumnFieldNumber = 2;
        private global::FactSet.Protobuf.Stach.V3.TableView.Types.CollapsedColumn collapsedColumn_;
        /// <summary>
        ///
        ///The settings for the algorithm to create a collapsed column.
        ///The rendering layer should collapse the columns specified by `Group.by` or `GroupResult.by` into a collapsed column.
        ///Optional.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::FactSet.Protobuf.Stach.V3.TableView.Types.CollapsedColumn CollapsedColumn {
          get { return collapsedColumn_; }
          set {
            collapsedColumn_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Group);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Group other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!by_.Equals(other.by_)) return false;
          if (!object.Equals(CollapsedColumn, other.CollapsedColumn)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= by_.GetHashCode();
          if (collapsedColumn_ != null) hash ^= CollapsedColumn.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          by_.WriteTo(output, _repeated_by_codec);
          if (collapsedColumn_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(CollapsedColumn);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += by_.CalculateSize(_repeated_by_codec);
          if (collapsedColumn_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollapsedColumn);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Group other) {
          if (other == null) {
            return;
          }
          by_.Add(other.by_);
          if (other.collapsedColumn_ != null) {
            if (collapsedColumn_ == null) {
              CollapsedColumn = new global::FactSet.Protobuf.Stach.V3.TableView.Types.CollapsedColumn();
            }
            CollapsedColumn.MergeFrom(other.CollapsedColumn);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                by_.AddEntriesFrom(input, _repeated_by_codec);
                break;
              }
              case 18: {
                if (collapsedColumn_ == null) {
                  CollapsedColumn = new global::FactSet.Protobuf.Stach.V3.TableView.Types.CollapsedColumn();
                }
                input.ReadMessage(CollapsedColumn);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///
      ///A virtual collapsed column.
      /// </summary>
      public sealed partial class CollapsedColumn : pb::IMessage<CollapsedColumn> {
        private static readonly pb::MessageParser<CollapsedColumn> _parser = new pb::MessageParser<CollapsedColumn>(() => new CollapsedColumn());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CollapsedColumn> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.V3.TableView.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollapsedColumn() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollapsedColumn(CollapsedColumn other) : this() {
          alias_ = other.alias_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CollapsedColumn Clone() {
          return new CollapsedColumn(this);
        }

        /// <summary>Field number for the "alias" field.</summary>
        public const int AliasFieldNumber = 1;
        private string alias_ = "";
        /// <summary>
        ///
        ///The alias of the collapsed column.
        ///The collapsed column is *not* in the data so it is considered virtual and therefore needs an alias. A dollar sign ($) prefix, such as "$collapsedColumn", can be used to indicate an alias but is not necessary.
        ///Required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Alias {
          get { return alias_; }
          set {
            alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CollapsedColumn);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CollapsedColumn other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Alias != other.Alias) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Alias.Length != 0) hash ^= Alias.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Alias.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Alias);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Alias.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CollapsedColumn other) {
          if (other == null) {
            return;
          }
          if (other.Alias.Length != 0) {
            Alias = other.Alias;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Alias = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///
      ///An algorithm that vertically splits tabular data and produces a column for each unique value in the columns that were split over.
      /// </summary>
      public sealed partial class Split : pb::IMessage<Split> {
        private static readonly pb::MessageParser<Split> _parser = new pb::MessageParser<Split>(() => new Split());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Split> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.V3.TableView.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Split() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Split(Split other) : this() {
          alias_ = other.alias_;
          by_ = other.by_.Clone();
          include_ = other.include_.Clone();
          over_ = other.over_.Clone();
          headers_ = other.headers_.Clone();
          removeEmptySplitColumns_ = other.removeEmptySplitColumns_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Split Clone() {
          return new Split(this);
        }

        /// <summary>Field number for the "alias" field.</summary>
        public const int AliasFieldNumber = 1;
        private string alias_ = "";
        /// <summary>
        ///
        ///The alias of the columns generated by the split algorithm.
        ///A dollar sign ($) prefix, such as "$splitColumns", can be used to indicate an alias but is not necessary.
        ///Required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Alias {
          get { return alias_; }
          set {
            alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "by" field.</summary>
        public const int ByFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_by_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> by_ = new pbc::RepeatedField<string>();
        /// <summary>
        ///
        ///The names of columns to split by.
        ///Required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> By {
          get { return by_; }
        }

        /// <summary>Field number for the "include" field.</summary>
        public const int IncludeFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_include_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> include_ = new pbc::RepeatedField<string>();
        /// <summary>
        ///
        ///The names of columns to include in the multi-level headers table when splitting.
        ///Optional.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Include {
          get { return include_; }
        }

        /// <summary>Field number for the "over" field.</summary>
        public const int OverFieldNumber = 4;
        private static readonly pb::FieldCodec<string> _repeated_over_codec
            = pb::FieldCodec.ForString(34);
        private readonly pbc::RepeatedField<string> over_ = new pbc::RepeatedField<string>();
        /// <summary>
        ///
        ///The names of columns to split over.
        ///Required.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Over {
          get { return over_; }
        }

        /// <summary>Field number for the "headers" field.</summary>
        public const int HeadersFieldNumber = 5;
        private static readonly pbc::MapField<string, string>.Codec _map_headers_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
        private readonly pbc::MapField<string, string> headers_ = new pbc::MapField<string, string>();
        /// <summary>
        ///
        ///The human-readable header values of `over` columns to be applied.
        ///Key is the column name, and value is the human-readable value.
        ///Optional.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Headers {
          get { return headers_; }
        }

        /// <summary>Field number for the "remove_empty_split_columns" field.</summary>
        public const int RemoveEmptySplitColumnsFieldNumber = 6;
        private bool removeEmptySplitColumns_;
        /// <summary>
        ///
        ///Whether to remove empty split columns or not.
        ///Default is `false`.
        ///Optional.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RemoveEmptySplitColumns {
          get { return removeEmptySplitColumns_; }
          set {
            removeEmptySplitColumns_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Split);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Split other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Alias != other.Alias) return false;
          if(!by_.Equals(other.by_)) return false;
          if(!include_.Equals(other.include_)) return false;
          if(!over_.Equals(other.over_)) return false;
          if (!Headers.Equals(other.Headers)) return false;
          if (RemoveEmptySplitColumns != other.RemoveEmptySplitColumns) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Alias.Length != 0) hash ^= Alias.GetHashCode();
          hash ^= by_.GetHashCode();
          hash ^= include_.GetHashCode();
          hash ^= over_.GetHashCode();
          hash ^= Headers.GetHashCode();
          if (RemoveEmptySplitColumns != false) hash ^= RemoveEmptySplitColumns.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Alias.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Alias);
          }
          by_.WriteTo(output, _repeated_by_codec);
          include_.WriteTo(output, _repeated_include_codec);
          over_.WriteTo(output, _repeated_over_codec);
          headers_.WriteTo(output, _map_headers_codec);
          if (RemoveEmptySplitColumns != false) {
            output.WriteRawTag(48);
            output.WriteBool(RemoveEmptySplitColumns);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Alias.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
          }
          size += by_.CalculateSize(_repeated_by_codec);
          size += include_.CalculateSize(_repeated_include_codec);
          size += over_.CalculateSize(_repeated_over_codec);
          size += headers_.CalculateSize(_map_headers_codec);
          if (RemoveEmptySplitColumns != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Split other) {
          if (other == null) {
            return;
          }
          if (other.Alias.Length != 0) {
            Alias = other.Alias;
          }
          by_.Add(other.by_);
          include_.Add(other.include_);
          over_.Add(other.over_);
          headers_.Add(other.headers_);
          if (other.RemoveEmptySplitColumns != false) {
            RemoveEmptySplitColumns = other.RemoveEmptySplitColumns;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Alias = input.ReadString();
                break;
              }
              case 18: {
                by_.AddEntriesFrom(input, _repeated_by_codec);
                break;
              }
              case 26: {
                include_.AddEntriesFrom(input, _repeated_include_codec);
                break;
              }
              case 34: {
                over_.AddEntriesFrom(input, _repeated_over_codec);
                break;
              }
              case 42: {
                headers_.AddEntriesFrom(input, _map_headers_codec);
                break;
              }
              case 48: {
                RemoveEmptySplitColumns = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
